package com.springboot.demo.dao;

import com.springboot.demo.entity.History;
import jakarta.xml.bind.DatatypeConverter;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.jdbc.EmbeddedDatabaseConnection;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.context.SpringBootTest;

import javax.sql.rowset.serial.SerialBlob;
import java.sql.Blob;
import java.util.List;

@SpringBootTest
@AutoConfigureTestDatabase(connection = EmbeddedDatabaseConnection.H2)
public class DemoDAOTests {
    @Autowired(required = true)
    private DemoDAO demoDAO;

    public static Blob parseBlob (String hexData) {
        String data = null;
        SerialBlob blob = null;
        byte[] bytes = DatatypeConverter.parseHexBinary(hexData);

        try {
            blob = new SerialBlob(bytes);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return blob;
    }

    @Test
    public void demoDAO_Save_ReturnTrue () {
        String hexData = "0x255044462D312E340A25F6E4FCDF0A312030206F626A0A3C3C0A2F54797065202F436174616C6F670A2F50616765732032203020520A3E3E0A656E646F626A0A332030206F626A0A3C3C0A2F50726F6475636572203C363935343635373837344145323033353245333532453331333332453332323041393332333033303330324433323330333233303230363935343635373837343230343737323646373537303230344535363230323834313437353034433244373636353732373336393646364532393E0A2F4372656174696F6E446174652028443A32303233303532383130323932342B303727303027290A2F4D6F64446174652028443A32303233303532383130323932342B303727303027290A3E3E0A656E646F626A0A322030206F626A0A3C3C0A2F54797065202F50616765730A2F436F756E7420380A2F4B696473205B342030205220352030205220362030205220372030205220382030205220392030205220313020302052203131203020525D0A3E3E0A656E646F626A0A342030206F626A0A3C3C0A2F54797065202F506167650A2F4D65646961426F78205B30203020353935203834325D0A2F5265736F7572636573203C3C0A2F466F6E74203C3C0A2F4631203132203020520A3E3E0A3E3E0A2F436F6E74656E7473203133203020520A2F506172656E742032203020520A3E3E0A656E646F626A0A352030206F626A0A3C3C0A2F54797065202F506167650A2F4D65646961426F78205B30203020353935203834325D0A2F5265736F7572636573203C3C0A2F466F6E74203C3C0A2F4631203132203020520A3E3E0A3E3E0A2F436F6E74656E7473203134203020520A2F506172656E742032203020520A3E3E0A656E646F626A0A362030206F626A0A3C3C0A2F54797065202F506167650A2F4D65646961426F78205B30203020353935203834325D0A2F5265736F7572636573203C3C0A2F466F6E74203C3C0A2F4631203132203020520A3E3E0A3E3E0A2F436F6E74656E7473203135203020520A2F506172656E742032203020520A3E3E0A656E646F626A0A372030206F626A0A3C3C0A2F54797065202F506167650A2F4D65646961426F78205B30203020353935203834325D0A2F5265736F7572636573203C3C0A2F466F6E74203C3C0A2F4631203132203020520A3E3E0A3E3E0A2F436F6E74656E7473203136203020520A2F506172656E742032203020520A3E3E0A656E646F626A0A382030206F626A0A3C3C0A2F54797065202F506167650A2F4D65646961426F78205B30203020353935203834325D0A2F5265736F7572636573203C3C0A2F466F6E74203C3C0A2F4631203132203020520A3E3E0A3E3E0A2F436F6E74656E7473203137203020520A2F506172656E742032203020520A3E3E0A656E646F626A0A392030206F626A0A3C3C0A2F54797065202F506167650A2F4D65646961426F78205B30203020353935203834325D0A2F5265736F7572636573203C3C0A2F466F6E74203C3C0A2F4631203132203020520A3E3E0A3E3E0A2F436F6E74656E7473203138203020520A2F506172656E742032203020520A3E3E0A656E646F626A0A31302030206F626A0A3C3C0A2F54797065202F506167650A2F4D65646961426F78205B30203020353935203834325D0A2F5265736F7572636573203C3C0A2F466F6E74203C3C0A2F4631203132203020520A3E3E0A3E3E0A2F436F6E74656E7473203139203020520A2F506172656E742032203020520A3E3E0A656E646F626A0A31312030206F626A0A3C3C0A2F54797065202F506167650A2F4D65646961426F78205B30203020353935203834325D0A2F5265736F7572636573203C3C0A2F466F6E74203C3C0A2F4631203132203020520A3E3E0A3E3E0A2F436F6E74656E7473203230203020520A2F506172656E742032203020520A3E3E0A656E646F626A0A31322030206F626A0A3C3C0A2F54797065202F466F6E740A2F53756274797065202F54797065310A2F42617365466F6E74202F48656C7665746963610A2F456E636F64696E67202F57696E416E7369456E636F64696E670A3E3E0A656E646F626A0A31332030206F626A0A3C3C0A2F4C656E677468203533320A2F46696C746572202F466C6174654465636F64650A3E3E0A73747265616D0D0A789CAD965F6F9B3014C5DFF9147ECC1E127CB1B1A18F9DB669D3A4691B7DD823096EEC843F299875DDA79F214D933A936CC955142912F7707E393AD7F0103D44B74504089B0F20C210E718154D147F0404092AEEA305ACDE15BBE843117D37C3A7AF2502668912B788B1C412110F11CE2C11758BD2945AA2D44384ED20985B44A91D04778B486E07917988881D44EE1625991D04600F15B9AA84472780DB5180472920B1B3009F56D85980D58A678919CDB0C1AA228C96904D3F2E445FD5A051778F3E292DC735BA1B448F6ED0749FC9C8CC266CC5F29370F17C7D2F5ABDA9BAAA1AA6C9E571661EA72F268BCF959904532996D1798CE2AB991FE2D0A1BBBE369352EBC37013C7E541ADB633CD6AD335F1681C87F86C18F74632BCBADF7F11BFFD56B52A5D789CE738C5A174472F5FB25A88BE5BBBC87200C26930DAD1CC17EDBD14ED2F5577EDD6859718BE3C8150BCB3A12FA2D4FD528B8D7401A68C650990E0E69DFC7CF91AD16F9ED6B5D27F9D84840004F39DFDFC09852C1FF72EBC0C03E3247903C0D9CE97AE17CD93F350211C076FC664E40B55364A0F52EC65D92BA5D772746E6FC639D03494F1CAD717F84B27DB9F635B89BA766E32658CE3E04DBE70F48534FFACDDFE51ED4EB9CF1B30E7B479BA86525E5AFA62EE86BD10DA0968320C0EF168E5DD4AD99455F9582AE75338671808096EE38B9FF732F7DD380CA2366F17CE1A9AE326E5F47584F3BBCC3FDC1FFA620D0A656E6473747265616D0A656E646F626A0A31342030206F626A0A3C3C0A2F4C656E677468203533310A2F46696C746572202F466C6174654465636F64650A3E3E0A73747265616D0D0A789CAD964B6FE2301485F7F91559328B125FDB719CEEA652E72575C1285D7469201097BC6A2795C8AF1F03ED2898916CC9A3880829F7F87C39DC6BF316BD452BF37928228891B920262CCE3214174D947C8318705CECA205A4CB2FC56BF4589CAB57FF5601B355CCAD620CDBAACC4385B8ADE26E559A525B957BA8909D06466E15A5761A18DC2A92DB6960ECA122761A98B85598DB6960EAA122376978F40664376978F406E09B347C7AE3260CAB353E24A6942383B58D288AEF809FBECD54BFCBBE8B9F551DDFC7D530F4FA3E49442F977B3954E37AB9E99A64D4A5D28952DDA875597F9743A28C469FBCEEE809C72C685E93E59FAB2F9E8DC2ACA70FC7A93A975D1EA36B88C5CFAD29A290730270B5DAACC617EFECE50BB696D3C4A98B0C52022C0B05BB78F992558DD05DEB24CB72C242C12E56BE60B2F9AAC44E0C3F4E4D209D8418708A38905048CBD6BBF386B2AFCA7653D652BB5059CA839B6F66E78B588BE9D8AB6EAF44D394CAF98B130479163C25D7A6BEA8FBAEDEAE4BB53F76AD7481F2340373928482CE2DBD31C5A16BF5E01E1E8EB0B905235EEC7CE9442B7525864AD4C7D2854852CC280F9EF0B9A52FE64ED4EFDDABB31F3382688E43013FCC7CD95EC6F6A51B7F8DEEDD2785945212CCF7D7D097B011EA3055C239250088FD8729F9B4F3C57B9287F269B31A85DC3A09CDFE1D7E2ACF0C7D191FDF45FB2036EE4330678C12767DC29CFFFBFC01133F0FBA0D0A656E6473747265616D0A656E646F626A0A31352030206F626A0A3C3C0A2F4C656E677468203530360A2F46696C746572202F466C6174654465636F64650A3E3E0A73747265616D0D0A789CAD96DD6E9B301886CFB90A1F660709FEFFE961A54EDACE3AD10B70C023ACC4A41090D2AB9F93366B0393FC4D9E22A41C7CAFDF470FC6F092BD648FE1BA2F328270F811C424520AA3629FE55F092214153FB315359B2FC5AFECA1B84C3FFE3D45E42CC5703C25259DA7082085F53C45E32921F83CC500293CB7C1783CC5F9C28688A79859D89080145BD850F114D50B1B1A90620B1B80BD41D4DC0607EC0D42E73638646FCC65F0D9D6788F84518D035695718CD6449FFF7D4AFD70870E3DF52DBA43BBE3F130DCE5B93D349BBA39EEC6EDA6ECF6F938B87EC81F26EBEF6DD9F9BC0F89E1DCB4E66798B01C951B69AE6BAF9EC27C58CD56765FEE6CE35F2FB36F33F89663F5AD0A935A2889CDCD8A9F46A0801F7D50423F352ECAC634E7A968E722B0365FBBF5C9D6BB2686467178F88C51C9E2FE344219ABDED6CE132D718C9153418510A9881F8550C47DDF8D839D4E3140228831989154C26B1F58A13DB5AE776E88DF65A5154E1678AD03FBAB0F54C4D8043398D064B84B1714ECBBDDF64D1BD72635534C273F1CEF75606DAE2ADB189BE43C1DECD204C6E26D8B9FA3CEC22780562CF9B87B6BFB076593AB7CF3DC4D51715A1923FF83B96B219471DB8FBE2BED607D37D9E89947B05252A762DE7482DF1EAF63F4C4338A24DFE2D003BFBFFDE49CEF4ED6C7CF13A24478E1DE2C7AF99EF90D77A4FA860D0A656E6473747265616D0A656E646F626A0A31362030206F626A0A3C3C0A2F4C656E677468203530390A2F46696C746572202F466C6174654465636F64650A3E3E0A73747265616D0D0A789CA596CB6EDB301045F7FA0A2E9D452CBE456519A005BAE822850264CBC8ACA554221D4A4EEABF2FFD486AD3053805210810A0B9730F2E868FD7E2B57808EF7D531084C3431093A8AA306AC6A2FC4A10A1A8F9592C385BDE342FC597E650FDF06F1591B18AA75552D25825002AAC62954CAB84E0B1AA02A8F0551A2AADE2FC2A8D3AAD62759C86C000158BD31024ADA22A4E4350808AC56908C06C902A4E43006683D0AB3420B3711546341A274928553860AD0A8ED12D51FBAF33D50FB371E8D10FE80E75F3BC99EECA526FFAE5BA9FBBEDF3B27563B99D8C9FCAD1F83763ACDB695BFAA099F65EB77C8F131A52B994F547F7C56350847E9B4E5B6D0F75C7FFF89262F16D15AA14169256FCA2DD590D94EF680645EB7D3BEADF66185274526229B2E13EEDA07C4F260526688D31CB057B3250A21767F51C3276769DCC8C3381452EDA992194F14D5B334D7A34B3B3BDED539C0CAB5A299A0B1AB94261EDE0BA51DBE4FA20A2E64AE5427EB841E95AED87C1F8B64B0EA2240AE7D2FD7583F269ED9D9DDE5370BC26752EDCC90A4AB61BDB6D72F488C4B5602C9BED600625FB6EECBA7149B4FD8627B257C5D10C1C9ADBDAF57B6F57C9D38263A2AA6CBA4FBFFF580FBB5F5D8A8EB22AECCB2C7BB51EDDA06C5EEF266D45F2C4A8A454ACCA653BB941E1C2BDA1D52B37F4CF3EB995502E0491173D0FB7993F1C9FFEBC0D0A656E6473747265616D0A656E646F626A0A31372030206F626A0A3C3C0A2F4C656E677468203531360A2F46696C746572202F466C6174654465636F64650A3E3E0A73747265616D0D0A789CAD96CD6EA3301485F73C05CBCC22C17F18BBCB4A33A319A98B8EE803B8B15368F9490DE988B71F439B2835957C250F082952EEF1F974EEB5E135794DEEDD735B263845EEC629E56951A0B46C93EC074E3149CB43B2C98BDDB7F239F95E2ED5F75FAB30F75522ACE29CF82A095021E1A9380AABF29CF92A0C50213F0D4EC22AC6FC34380DABA8F4D3E00CA0A2AB34F2B08A88551A1CA0A2AB3400B3818B551A80D9C06495066436FC300A6F343E24AE542087A51386D22D16F3AF2BD51F73ECD307DBA43769358EC7E126CBD4B1DE3DD563757ADCEDFB363B0DC60E596BEC5EE9BEA91FADC9AC130DB3D996CD3C6E45C2775C9E97DF3C38895BB0356DBF54BDFF8B3E436C7E6957831973597F5AEBAA044ED7F6502AA3F5A4BB2017E6C8A1B158B2773778628379336138770871F21F525BDCA0705669654368848B22966B318252FDEEBB6EBA559DBB836C39938C7211CB7765096FACB5D3BC87A6606F738CDC25E39B7B7684336EBB7EABCD5B1091704E8B223AC78B219470AC8CDAF7DA0CE14E2329F358BE8B1D946F68EAA76A6CA6FE700811CA82521C0B78E5076EF24FD528DB4D2FE103505222058F6EF2D9104AA81AF3AC3A6D7B35AA7D157E81E488099C471F3A9E2D947652436D5F4E4DF0F0C188CCEF94E84D73318412EA6363FED6C12D2305459447EF990F3728DC9D19D59D1A00D35830967BD3B87CEAFC03468B07460D0A656E6473747265616D0A656E646F626A0A31382030206F626A0A3C3C0A2F4C656E677468203531300A2F46696C746572202F466C6174654465636F64650A3E3E0A73747265616D0D0A789CA596CB6EDB301045F7FA0A2DDD852DBEC447760D90025D789142F90046A26BC67A38A25C20FDFA528ADDDA74010E400802B4983BF7E06A38D27BF69E3DFBFBB1CA708EFC8573CA7321505E7559F10DE798E4D52E5B09BCF952BD654FD552FDFC7F15E6A18AC4559C935045012A2443158BABCA9285AA12A0427769F0B88AB1BB34445C45D55D1A12A0A27769A8B88AC8300D89002A1AA62101B38145988604CC0626611A12321B611832188DB3C4974AE4B19A8CA17C8DE5FC74A5FA618E43FE32B6F943BE9FA6A37B280A7DB49B9F76DA9F5E37F5D015276746576CCDA4B7DA1D8AD10BDC6CB466338BEF46F886AB4BEBD58B2FF7CDECD01B579F10124BED670DBAC5587D6F7C25474C48CE6E5A5ED54001FF19821175B73E1A73D01F31C492118C553AE25F4328626BECCE8C9DE91BF33B06894B8908E53C95F2DA13CAB9D5E387EEBE9EDC34EAD6EA182AE14460C1542A6A600BA535A3ADBBB7364E4971999EE7D90D0A77F8D50F51344A94C214A5A22D5E50B0FDF83A763EE9E861414A0A998A767183D275A6B64D3C36460549455BACA05CD3E4EA61B78B91F91548692AD8D90B8A56DB7170BA9F6CDBDAE8726144F9D3904A786D09C51CF66DF4C5961CFB23918C375BC107CE39D33B135FCB254765F2B7E36207C56BFAA1D387189CC2F31E4965FBF4026F5F3799B68DE6C69594B75B64F9B3F903EE6D01710D0A656E6473747265616D0A656E646F626A0A31392030206F626A0A3C3C0A2F4C656E677468203531320A2F46696C746572202F466C6174654465636F64650A3E3E0A73747265616D0D0A789CAD964B6FDA401485F7FE155E920578DE8F2C2BA5529741CE0F18E38971B019B04DA2E6D77778A485A1EA5C692A8484E47BE67C3A73AEC53EDB67CFFEFBADCC708EFC07E754E452A2BCECB3E23BCE31C9CBD76CA6F8E2A17CCB9ECAD3F4F3DF5558842A11570941429504A8900A552AAEE29C852A0D50A1300D8DE22AC6C234348EABA80ED3D004A0A2611A9AC655448569680650D1BB3400DDC0F22E0D403730B94B03D28DBB30826A5C247E54218F55670CE573AC8EBFAE544BBB73F9CBD0E58FF97A9A76E36351985DBB68DA697DA8162BD71787D10E6361C7C9769D2D063F3F1E7DE6EC88E20F236221F4D7C9B3173FEDCFAA56CE9EA6CE4FD1ADFFEC47ED67B06602E99BB3AE46A060472728553398AA728718186182692152C92E6E50B8E5D2BE7B991D62789C4BAE512ADD6F3B285FB7F95C1B1783A3946BC593E9CE6650B4C16C6BD7CF0757556DB4764C23A24472EF6E3CA1A0BD5DF776729F1BF3D344D70333C9184FE5BCB68462D6A677FBD66D9B7D1B5D16AC884638F9C2AF2DA198AF836DCC768ABF68182284E154C42F3B28DEDBC157641585F3FB222996A974673778112F3BFAAFD7202792214CD31BC8119CAB31B51BA357CA7DED08D3FF613BCE7EE0CDF868C776FCF03500C4A7A8E42C7D33FE584229DFCD4837D1E24941194BA53B59C137A26B6D6787DE6CA3178C90C4E436BCD35F9B5FADD300200D0A656E6473747265616D0A656E646F626A0A32302030206F626A0A3C3C0A2F4C656E677468203231380A2F46696C746572202F466C6174654465636F64650A3E3E0A73747265616D0D0A789CA5914B0AC2301445E759C51BD6814D5263DA3A14141C2A710151635BE9CF340597EF6B55A81F509010C8E09E7B0FE44CCE648D77AE08078687C3444218325005A14B0E3C0075245E1CFB2375220BD5A7D79F292E5F28CED83B7607118818020722188C79D4BD06E8C6D4156C6D0E33489DAB9B19A5BACEFC247369BBF3F75541DBC6D8869EDA3C33B9B1852EA945A6E9F6C6A293C2C240FA327EB47B5B24B0CF595DEA3275AD767DF81662CF2ADEEA8051190A1146823D950E42BF5A0E267FB54CAAC25CBEF9C5533E09FE95EB973E68F5BF760561B18EC70D0A656E6473747265616D0A656E646F626A0A787265660A302032310A3030303030303030303020363535333520660D0A30303030303030303135203030303030206E0D0A30303030303030323835203030303030206E0D0A30303030303030303634203030303030206E0D0A30303030303030333836203030303030206E0D0A30303030303030353134203030303030206E0D0A30303030303030363432203030303030206E0D0A30303030303030373730203030303030206E0D0A30303030303030383938203030303030206E0D0A30303030303031303236203030303030206E0D0A30303030303031313534203030303030206E0D0A30303030303031323833203030303030206E0D0A30303030303031343132203030303030206E0D0A30303030303031353130203030303030206E0D0A30303030303032313137203030303030206E0D0A30303030303032373233203030303030206E0D0A30303030303033333034203030303030206E0D0A30303030303033383838203030303030206E0D0A30303030303034343739203030303030206E0D0A30303030303035303634203030303030206E0D0A30303030303035363531203030303030206E0D0A747261696C65720A3C3C0A2F53697A652032310A2F526F6F742031203020520A2F496E666F2033203020520A2F4944205B3C32353343433639413743324138363739373243423634463230343543394632313E203C32353343433639413743324138363739373243423634463230343543394632313E5D0A3E3E0A7374617274787265660A353934340A2525454F460A";
        hexData = hexData.replace("0x", "");

        Blob data =  parseBlob(hexData);

        History history = new History("thomas", "github",data);
        boolean hasSuccess = demoDAO.save(history);
        Assertions.assertEquals(true, hasSuccess);
    }

    @Test
    public void demoDAO_FindAll_ReturnListHistory () {
        List<History> historyList = demoDAO.findAll();
        Assertions.assertEquals(1, historyList.size());
    }

}
